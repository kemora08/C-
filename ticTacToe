using System;

private static readonly object playerTurn;

namespace TicTacToe
{
    class Program
    {
        public static string playerTurn = "X";
        public static string[][] board = new string[][]
        {
            new string[] {" ", " ", " "},
            new string[] {" ", " ", " "},
            new string[] {" ", " ", " "}
        };
        private static object button2;
        private static object button1;
        private static object button7;

        public static object button4 { get; private set; }
        public static bool win { get; private set; }

        public static void Main()
        {
            do
            {
                DrawBoard();
                GetInput();

            } while (!CheckForWin() && !CheckForTie());

            // leave this command at the end so your program does not close automatically
            Console.ReadLine();
        }

        public static void GetInput()
        {
            Console.WriteLine("Player " + playerTurn);
            Console.WriteLine("Enter Row:");
            int row = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter Column:");
            int column = int.Parse(Console.ReadLine());
        }

        public static void PlaceMark(int row, int column)
        {
            // your code goes here
            board[row][column] = playerTurn;
        }

        public static bool CheckForWin()
        {
            // your code goes here
            bool win = false;

            win = (HorizontalWin() || VerticalWin() || DiagonalWin()) ? true : false;

            return win;
        }
        }

        public static bool CheckForTie()
        {
            // your code goes here
            bool tie = false;

            tie = SlotsAvailable() == 0 ? true : false;

            return tie;
        }
        }

        public static bool HorizontalWin()
        {
           
            {
        {
            /*******************

             ►[0,0] [0,1] [0,2]
             ►[1,0] [1,1] [1,2]
             ►[2,0] [2,1] [2,2] 

            *******************/

            bool win = false;
            bool topRow = false;
            bool middleRow = false;
            bool bottomRow = false;

            topRow = (board[0][0] == playerTurn && board[0][1] == playerTurn && board[0][2] == playerTurn); // top row

            middleRow = (board[1][0] == playerTurn && board[1][1] == playerTurn && board[1][2] == playerTurn); // middle row

            bottomRow = (board[2][0] == playerTurn && board[2][1] == playerTurn && board[2][2] == playerTurn); // bottom row

            win = (topRow || middleRow || bottomRow);

            return win;
        }

    }

           
        }

        public static bool VerticalWin()
        {
    // your code goes here
    /*******************
▼     ▼     ▼
[0,0] [0,1] [0,2]
[1,0] [1,1] [1,2]
[2,0] [2,1] [2,2] 

*******************/

    bool win = false;
    bool leftColumn = false;
    bool middleColumn = false;
    bool rightColumn = false;

    leftColumn = (board[0][0] == playerTurn && board[1][0] == playerTurn && board[2][0] == playerTurn); // left column

    middleColumn = (board[0][1] == playerTurn && board[1][1] == playerTurn && board[2][1] == playerTurn); // middle column

    rightColumn = (board[0][2] == playerTurn && board[1][2] == playerTurn && board[2][2] == playerTurn); // right column

    win = (leftColumn || middleColumn || rightColumn);

    return win;
        }

        public static bool DiagonalWin()
        {
    // your code goes here

    /*******************

      [0,0] [0,1] [0,2]
      [1,0] [1,1] [1,2]
      [2,0] [2,1] [2,2] 
     *******************/
    bool win = false;
    bool firstDiagonal = false;
    bool secondDiagonal = false;

    object board = null;
    firstDiagonal = (board[0][0] == playerTurn && board[1][1] == playerTurn && board[2][2] == playerTurn); // first diagonal
    secondDiagonal = (board[2][0] == playerTurn && board[1][1] == playerTurn && board[0][2] == playerTurn); // second diagonal

    win = (firstDiagonal || secondDiagonal);

    return win;
        }

        public static void DrawBoard()
        {
    //Console.WriteLine("  0 1 2");
    //Console.WriteLine("0 " + String.Join("|", board[0]));
    //Console.WriteLine("  -----");
    //Console.WriteLine("1 " + String.Join("|", board[1]));
    //Console.WriteLine("  -----");
    //Console.WriteLine("2 " + String.Join("|", board[2]));

    /*
  [1][2][3] 
  [4][5][6]
  [7][8][9]
*/

    Console.Clear();

    //var json = JsonConvert.SerializeObject(board, Formatting.None);
    //Console.WriteLine(json);

    Console.WriteLine(">>>>TIC TAC TOE<<<<");

    Console.ForegroundColor = ConsoleColor.DarkGray;
    Console.WriteLine();

    foreach (var row in board)
    {
        foreach (var column in row)
        {
            if (column == "X")
                Console.ForegroundColor = ConsoleColor.Red;
            else if (column == "O")
                Console.ForegroundColor = ConsoleColor.Green;

            Console.Write(" " + column + " ");

            Console.ForegroundColor = ConsoleColor.DarkGray;

        }

        Console.WriteLine();
    }

    Console.WriteLine();
    Console.ResetColor();
}
        }
    }

    internal class button9
    {
        internal static object Text;
    }

    internal class button8
    {
        public static object Text { get; internal set; }
    }

    internal class button6
    {
    }

    internal class button3
    {
        internal static object Text;
    }

    internal class button
    {
        internal static object Text;
    }
}
